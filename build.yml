languages:
  assembly:
    build:
    - sh -c "as -o hello.as.o '$(cc -dumpmachine).s'"
    entry: hello_assembly
    includes: ""
    library: ""
    output: assembly/hello.as.o
    requires: as cc sh
    runtime: ""
    root: /src/assembly
  c:
    build:
    - cc -static -I../include -c -o hello.c.o hello.c
    entry: hello_c
    includes: ""
    library: c
    output: hello.c.o
    requires: cc
    runtime: ""
    root: /src
  cpp:
    build:
    - c++ -I../include -c -o hello.cpp.o hello.cpp
    entry: hello_cpp
    includes: ""
    library: stdc++
    output: hello.cpp.o
    requires: cpp
    runtime: ""
    root: /src
  d:
    build: 
    - dmd -c -of=hello.d.o hello.d
    entry: hello_d
    includes: ""
    library: phobos2
    output: hello.d.o
    requires: dmd
    runtime: ""
    root: /src
  fortran:
    build:
    - gfortran -c -o hello.f90.o hello.f90
    entry: hello_fortran
    includes: ""
    library: gfortran
    output: hello.f90.o
    requires: gfortran
    runtime: ""
    root: /src
  go:
    build:
    - go build -buildmode=c-archive -o hello.go.a hello.go
    - ranlib hello.go.a
    entry: hello_go
    includes: ""
    library: ""
    output: hello.go.a
    requires: go ranlib
    runtime: ""
    root: /src
  java:
    build:
    - javac Hello.java
    - javac -h jni Hello.java
    - xxd -i Hello.class Hello.class.h
    - cc -c -I../../include -I/usr/lib/jvm/default/include -I/usr/lib/jvm/default/include/linux -o wrapper.o wrapper.c
    entry: hello_java
    includes: ../lib/jvm/default/include/jni.h
    library: jvm
    output: java/wrapper.o
    requires: cc javac xxd
    runtime: jvm
    root: /src/java
  kotlin:
    build:
    - kotlinc hello.kt
    - xxd -i HelloKt.class HelloKt.class.h
    - cc -c -I/usr/lib/jvm/default/include -I/usr/lib/jvm/default/include/linux -o wrapper.o wrapper.c
    entry: hello_kotlin
    includes: ../lib/jvm/default/include/jni.h
    library: jvm
    output: kotlin/wrapper.o
    requires: cc kotlinc xxd
    runtime: jvm
    root: /src/kotlin
  lua:
    build:
    - luac -o hello.luac hello.lua
    - xxd -i hello.luac hello.luac.h
    - cc -I../../include -c -o wrapper.o wrapper.c
    entry: hello_lua
    includes: lua.h lauxlib.h lualib.h
    library: lua
    output: lua/wrapper.o
    requires: cc luac xxd
    runtime: ""
    root: /src/lua
  nim:
    build:
    - nim c --noMain --app:staticlib -o:hello.nim.a hello.nim
    entry: hello_nim
    includes: ""
    library: c
    output: hello.nim.a
    requires: nim
    runtime: ""
    root: /src
  python:
    build:
    - xxd -i hello.py hello.py.h
    - cc -c -o wrapper.o wrapper.c
    entry: hello_python
    includes: python3.10/Python.h
    library: python3.10
    output: python/wrapper.o
    requires: cc xxd
    runtime: ""
    root: /src/python
  rexx:
    build:
    - xxd -i hello.rex hello.rex.h
    - cc -c -o wrapper.o wrapper.c
    entry: hello_rexx
    includes: rexxsaa.h
    library: regina
    output: rexx/wrapper.o
    requires: cc xxd
    runtime: ""
    root: /src/rexx
  ruby:
    build:
    - xxd -i hello.rb hello.rb.h
    - cc -c -I/usr/include/ruby-3.0.0 -I/usr/include/ruby-3.0.0/x86_64-linux -o wrapper.o wrapper.c
    entry: hello_ruby
    includes: ruby-3.0.0/ruby.h
    library: m ruby
    output: ruby/wrapper.o
    requires: cc xxd
    runtime: ""
    root: /src/ruby
  rust:
    build:
    - cargo build
    entry: hello_rust
    includes: ""
    library: dl pthread
    output: rust/target/debug/libhello.a
    requires: cargo
    runtime: ""
    root: /src/rust
  tcl:
    build:
    - xxd -i hello.tcl hello.tcl.h
    - cc -c -o wrapper.o wrapper.c
    entry: hello_tcl_native
    includes: tcl.h
    library: tcl
    output: tcl/wrapper.o
    requires: cc xxd
    runtime: ""
    root: /src/tcl
runtimes:
  jvm:
    build:
    - cc -c -I/usr/lib/jvm/default/include -I/usr/lib/jvm/default/include/linux -o jvm.o jvm.c
    fini: fini_jvm
    includes: ../lib/jvm/default/include/jni.h
    init: init_jvm
    library: jvm
    output: runtime/jvm.o
    requires: cc
    root: /src/runtime