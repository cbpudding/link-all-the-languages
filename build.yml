c:
  build:
  - cc -c -o hello.c.o hello.c
  entry: hello_c
  library: c
  output: hello.c.o
  requires: cc
  root: /src
cpp:
  build:
  - c++ -c -o hello.cpp.o hello.cpp
  entry: hello_cpp
  library: stdc++
  output: hello.cpp.o
  requires: cpp
  root: /src
d:
  build: 
  - dmd -c -of=hello.d.o hello.d
  entry: hello_d
  library: phobos2
  output: hello.d.o
  requires: dmd
  root: /src
fortran:
  build:
  - gfortran -c -o hello.f90.o hello.f90
  entry: hello_fortran
  library: gfortran
  output: hello.f90.o
  requires: gfortran
  root: /src
go:
  build:
  - go build -buildmode=c-archive -o hello.go.a hello.go
  - ranlib hello.go.a
  entry: hello_go
  library: ""
  output: hello.go.a
  requires: go ranlib
  root: /src
java:
  build:
  - javac Hello.java
  - xxd -i Hello.class Hello.class.h
  - cc -c -I/usr/lib/jvm/default/include -I/usr/lib/jvm/default/include/linux -o wrapper.o wrapper.c
  entry: hello_java
  library: jvm
  output: java/wrapper.o
  requires: cc javac xxd
  root: /src/java
lua:
  build:
  - luac -o hello.luac hello.lua
  - xxd -i hello.luac hello.luac.h
  - cc -c -o wrapper.o wrapper.c
  entry: hello_lua
  library: lua
  output: lua/wrapper.o
  requires: cc luac xxd
  root: /src/lua
python:
  build:
  - xxd -i hello.py hello.py.h
  - cc -c -o wrapper.o wrapper.c
  entry: hello_python
  library: python3.10
  output: python/wrapper.o
  requires: cc xxd
  root: /src/python
ruby:
  build:
  - xxd -i hello.rb hello.rb.h
  - cc -c -o wrapper.o wrapper.c
  entry: hello_ruby
  library: ""
  output: ruby/wrapper.o
  requires: cc xxd
  root: /src/ruby
rust:
  build:
  - cargo build
  entry: hello_rust
  library: dl pthread
  output: rust/target/debug/libhello.a
  requires: cargo
  root: /src/rust
